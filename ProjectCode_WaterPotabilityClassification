{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Helen \"Nellie\" Dawson/Ryan Soucy\n",
        "\n",
        "DSP 556"
      ],
      "metadata": {
        "id": "1FVQg_XOBDJq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Final Project: Water Potability"
      ],
      "metadata": {
        "id": "W_TXzjiABPtV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I8BvunhloJVO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44deb40d-976a-4dc9-9851-993ea33c93a0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "#libraries\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "import pandas as pd\n",
        "import time\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "from sklearn.ensemble import BaggingClassifier\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.ensemble import StackingClassifier"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to Find the Default Hyperparameter(s) of a Model\n",
        "def find_parameter(model):\n",
        "  model1= model()\n",
        "  print(\"Default Parameters:\")\n",
        "  for param, value in model1.get_params().items():\n",
        "    print(f\"{param}: {value}\")\n",
        "\n",
        "# Compare while tuning then compare across"
      ],
      "metadata": {
        "id": "JJir3tM0o3MN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### Data Preprocessing\n"
      ],
      "metadata": {
        "id": "fbWEyNgsA7c4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import Data\n",
        "water = pd.DataFrame(pd.read_csv ('/content/drive/My Drive/Colab Notebooks/DSP 556 Final Project/water_potability.csv'))\n",
        "water.describe()\n",
        "# water.dtypes()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "HkIrWVH2zKhB",
        "outputId": "77e3bf13-584e-4aeb-f1a1-07698b053613"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                ph     Hardness        Solids  Chloramines      Sulfate  \\\n",
              "count  2785.000000  3276.000000   3276.000000  3276.000000  2495.000000   \n",
              "mean      7.080795   196.369496  22014.092526     7.122277   333.775777   \n",
              "std       1.594320    32.879761   8768.570828     1.583085    41.416840   \n",
              "min       0.000000    47.432000    320.942611     0.352000   129.000000   \n",
              "25%       6.093092   176.850538  15666.690297     6.127421   307.699498   \n",
              "50%       7.036752   196.967627  20927.833607     7.130299   333.073546   \n",
              "75%       8.062066   216.667456  27332.762127     8.114887   359.950170   \n",
              "max      14.000000   323.124000  61227.196008    13.127000   481.030642   \n",
              "\n",
              "       Conductivity  Organic_carbon  Trihalomethanes    Turbidity   Potability  \n",
              "count   3276.000000     3276.000000      3114.000000  3276.000000  3276.000000  \n",
              "mean     426.205111       14.284970        66.396293     3.966786     0.390110  \n",
              "std       80.824064        3.308162        16.175008     0.780382     0.487849  \n",
              "min      181.483754        2.200000         0.738000     1.450000     0.000000  \n",
              "25%      365.734414       12.065801        55.844536     3.439711     0.000000  \n",
              "50%      421.884968       14.218338        66.622485     3.955028     0.000000  \n",
              "75%      481.792304       16.557652        77.337473     4.500320     1.000000  \n",
              "max      753.342620       28.300000       124.000000     6.739000     1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c39203aa-b7d9-4ea1-8338-cb9cd5acc104\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ph</th>\n",
              "      <th>Hardness</th>\n",
              "      <th>Solids</th>\n",
              "      <th>Chloramines</th>\n",
              "      <th>Sulfate</th>\n",
              "      <th>Conductivity</th>\n",
              "      <th>Organic_carbon</th>\n",
              "      <th>Trihalomethanes</th>\n",
              "      <th>Turbidity</th>\n",
              "      <th>Potability</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2785.000000</td>\n",
              "      <td>3276.000000</td>\n",
              "      <td>3276.000000</td>\n",
              "      <td>3276.000000</td>\n",
              "      <td>2495.000000</td>\n",
              "      <td>3276.000000</td>\n",
              "      <td>3276.000000</td>\n",
              "      <td>3114.000000</td>\n",
              "      <td>3276.000000</td>\n",
              "      <td>3276.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.080795</td>\n",
              "      <td>196.369496</td>\n",
              "      <td>22014.092526</td>\n",
              "      <td>7.122277</td>\n",
              "      <td>333.775777</td>\n",
              "      <td>426.205111</td>\n",
              "      <td>14.284970</td>\n",
              "      <td>66.396293</td>\n",
              "      <td>3.966786</td>\n",
              "      <td>0.390110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.594320</td>\n",
              "      <td>32.879761</td>\n",
              "      <td>8768.570828</td>\n",
              "      <td>1.583085</td>\n",
              "      <td>41.416840</td>\n",
              "      <td>80.824064</td>\n",
              "      <td>3.308162</td>\n",
              "      <td>16.175008</td>\n",
              "      <td>0.780382</td>\n",
              "      <td>0.487849</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>47.432000</td>\n",
              "      <td>320.942611</td>\n",
              "      <td>0.352000</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>181.483754</td>\n",
              "      <td>2.200000</td>\n",
              "      <td>0.738000</td>\n",
              "      <td>1.450000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6.093092</td>\n",
              "      <td>176.850538</td>\n",
              "      <td>15666.690297</td>\n",
              "      <td>6.127421</td>\n",
              "      <td>307.699498</td>\n",
              "      <td>365.734414</td>\n",
              "      <td>12.065801</td>\n",
              "      <td>55.844536</td>\n",
              "      <td>3.439711</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.036752</td>\n",
              "      <td>196.967627</td>\n",
              "      <td>20927.833607</td>\n",
              "      <td>7.130299</td>\n",
              "      <td>333.073546</td>\n",
              "      <td>421.884968</td>\n",
              "      <td>14.218338</td>\n",
              "      <td>66.622485</td>\n",
              "      <td>3.955028</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.062066</td>\n",
              "      <td>216.667456</td>\n",
              "      <td>27332.762127</td>\n",
              "      <td>8.114887</td>\n",
              "      <td>359.950170</td>\n",
              "      <td>481.792304</td>\n",
              "      <td>16.557652</td>\n",
              "      <td>77.337473</td>\n",
              "      <td>4.500320</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>14.000000</td>\n",
              "      <td>323.124000</td>\n",
              "      <td>61227.196008</td>\n",
              "      <td>13.127000</td>\n",
              "      <td>481.030642</td>\n",
              "      <td>753.342620</td>\n",
              "      <td>28.300000</td>\n",
              "      <td>124.000000</td>\n",
              "      <td>6.739000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c39203aa-b7d9-4ea1-8338-cb9cd5acc104')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c39203aa-b7d9-4ea1-8338-cb9cd5acc104 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c39203aa-b7d9-4ea1-8338-cb9cd5acc104');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-20d04cd1-60b7-4252-bbed-1b9e3e875a5e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-20d04cd1-60b7-4252-bbed-1b9e3e875a5e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-20d04cd1-60b7-4252-bbed-1b9e3e875a5e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping Variables - Solids & Organic Carbon\n",
        "water = water.drop(columns = ['Solids', 'Organic_carbon'])\n",
        "water.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "2EJBmyoSz-BL",
        "outputId": "b9e60106-afee-4682-9f64-b1f7a65e3004"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         ph    Hardness  Chloramines     Sulfate  Conductivity  \\\n",
              "0       NaN  204.890455     7.300212  368.516441    564.308654   \n",
              "1  3.716080  129.422921     6.635246         NaN    592.885359   \n",
              "2  8.099124  224.236259     9.275884         NaN    418.606213   \n",
              "3  8.316766  214.373394     8.059332  356.886136    363.266516   \n",
              "4  9.092223  181.101509     6.546600  310.135738    398.410813   \n",
              "\n",
              "   Trihalomethanes  Turbidity  Potability  \n",
              "0        86.990970   2.963135           0  \n",
              "1        56.329076   4.500656           0  \n",
              "2        66.420093   3.055934           0  \n",
              "3       100.341674   4.628771           0  \n",
              "4        31.997993   4.075075           0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-070142f1-50e9-4d95-9bab-57d143cd369d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ph</th>\n",
              "      <th>Hardness</th>\n",
              "      <th>Chloramines</th>\n",
              "      <th>Sulfate</th>\n",
              "      <th>Conductivity</th>\n",
              "      <th>Trihalomethanes</th>\n",
              "      <th>Turbidity</th>\n",
              "      <th>Potability</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>204.890455</td>\n",
              "      <td>7.300212</td>\n",
              "      <td>368.516441</td>\n",
              "      <td>564.308654</td>\n",
              "      <td>86.990970</td>\n",
              "      <td>2.963135</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.716080</td>\n",
              "      <td>129.422921</td>\n",
              "      <td>6.635246</td>\n",
              "      <td>NaN</td>\n",
              "      <td>592.885359</td>\n",
              "      <td>56.329076</td>\n",
              "      <td>4.500656</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.099124</td>\n",
              "      <td>224.236259</td>\n",
              "      <td>9.275884</td>\n",
              "      <td>NaN</td>\n",
              "      <td>418.606213</td>\n",
              "      <td>66.420093</td>\n",
              "      <td>3.055934</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8.316766</td>\n",
              "      <td>214.373394</td>\n",
              "      <td>8.059332</td>\n",
              "      <td>356.886136</td>\n",
              "      <td>363.266516</td>\n",
              "      <td>100.341674</td>\n",
              "      <td>4.628771</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9.092223</td>\n",
              "      <td>181.101509</td>\n",
              "      <td>6.546600</td>\n",
              "      <td>310.135738</td>\n",
              "      <td>398.410813</td>\n",
              "      <td>31.997993</td>\n",
              "      <td>4.075075</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-070142f1-50e9-4d95-9bab-57d143cd369d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-070142f1-50e9-4d95-9bab-57d143cd369d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-070142f1-50e9-4d95-9bab-57d143cd369d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a42268e3-4cbe-49d9-a258-bf0cd240b67e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a42268e3-4cbe-49d9-a258-bf0cd240b67e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a42268e3-4cbe-49d9-a258-bf0cd240b67e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There is a chance that the water quality dataset is synthesized, so we ran a check on the data to determine whether or not the variable measurements were somewhat reasonable. We did this by researching the acceptable potable water measurements for each variable. We then separated out the potable water samples from the non-potable water samples and found the mean and standard deviation of these variables. We determined that Solids and Organic Carbons were not acceptable measurements for potable water, so we removed them from the dataset."
      ],
      "metadata": {
        "id": "U0b3m-JG3vMs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dealing with NA Values: Remove Observations with null values\n",
        "water = water.dropna()\n",
        "water.describe()"
      ],
      "metadata": {
        "id": "_SvapY8qBimW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "outputId": "0465cc47-b0da-41a8-9130-194ebd52f4f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                ph     Hardness  Chloramines      Sulfate  Conductivity  \\\n",
              "count  2011.000000  2011.000000  2011.000000  2011.000000   2011.000000   \n",
              "mean      7.085990   195.968072     7.134338   333.224672    426.526409   \n",
              "std       1.573337    32.635085     1.584820    41.205172     80.712572   \n",
              "min       0.227499    73.492234     1.390871   129.000000    201.619737   \n",
              "25%       6.089723   176.744938     6.138895   307.632511    366.680307   \n",
              "50%       7.027297   197.191839     7.143907   332.232177    423.455906   \n",
              "75%       8.052969   216.441070     8.109726   359.330555    482.373169   \n",
              "max      14.000000   317.338124    13.127000   481.030642    753.342620   \n",
              "\n",
              "       Trihalomethanes    Turbidity   Potability  \n",
              "count      2011.000000  2011.000000  2011.000000  \n",
              "mean         66.400859     3.969729     0.403282  \n",
              "std          16.077109     0.780346     0.490678  \n",
              "min           8.577013     1.450000     0.000000  \n",
              "25%          55.952664     3.442915     0.000000  \n",
              "50%          66.542198     3.968177     0.000000  \n",
              "75%          77.291925     4.514175     1.000000  \n",
              "max         124.000000     6.494749     1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-43fe845d-9384-48c6-93a2-01d12ae1acd6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ph</th>\n",
              "      <th>Hardness</th>\n",
              "      <th>Chloramines</th>\n",
              "      <th>Sulfate</th>\n",
              "      <th>Conductivity</th>\n",
              "      <th>Trihalomethanes</th>\n",
              "      <th>Turbidity</th>\n",
              "      <th>Potability</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.085990</td>\n",
              "      <td>195.968072</td>\n",
              "      <td>7.134338</td>\n",
              "      <td>333.224672</td>\n",
              "      <td>426.526409</td>\n",
              "      <td>66.400859</td>\n",
              "      <td>3.969729</td>\n",
              "      <td>0.403282</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.573337</td>\n",
              "      <td>32.635085</td>\n",
              "      <td>1.584820</td>\n",
              "      <td>41.205172</td>\n",
              "      <td>80.712572</td>\n",
              "      <td>16.077109</td>\n",
              "      <td>0.780346</td>\n",
              "      <td>0.490678</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.227499</td>\n",
              "      <td>73.492234</td>\n",
              "      <td>1.390871</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>201.619737</td>\n",
              "      <td>8.577013</td>\n",
              "      <td>1.450000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6.089723</td>\n",
              "      <td>176.744938</td>\n",
              "      <td>6.138895</td>\n",
              "      <td>307.632511</td>\n",
              "      <td>366.680307</td>\n",
              "      <td>55.952664</td>\n",
              "      <td>3.442915</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.027297</td>\n",
              "      <td>197.191839</td>\n",
              "      <td>7.143907</td>\n",
              "      <td>332.232177</td>\n",
              "      <td>423.455906</td>\n",
              "      <td>66.542198</td>\n",
              "      <td>3.968177</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.052969</td>\n",
              "      <td>216.441070</td>\n",
              "      <td>8.109726</td>\n",
              "      <td>359.330555</td>\n",
              "      <td>482.373169</td>\n",
              "      <td>77.291925</td>\n",
              "      <td>4.514175</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>14.000000</td>\n",
              "      <td>317.338124</td>\n",
              "      <td>13.127000</td>\n",
              "      <td>481.030642</td>\n",
              "      <td>753.342620</td>\n",
              "      <td>124.000000</td>\n",
              "      <td>6.494749</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43fe845d-9384-48c6-93a2-01d12ae1acd6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-43fe845d-9384-48c6-93a2-01d12ae1acd6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-43fe845d-9384-48c6-93a2-01d12ae1acd6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-80638205-e138-41a3-9a4d-e96cf389f809\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-80638205-e138-41a3-9a4d-e96cf389f809')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-80638205-e138-41a3-9a4d-e96cf389f809 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Of the 3216 original water samples, we were able to retain 2011 samples that included all of the variables. We determined that this was a large enough sample size to perform our analysis with."
      ],
      "metadata": {
        "id": "QZkD4s-r3V_C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split based on Potability then rerun data summary\n",
        "potable  = water[water[\"Potability\"] == 1]\n",
        "potable.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "0-RsZFFJzMth",
        "outputId": "a5881bcc-5fd9-4cc6-8d84-06d33600dc73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               ph    Hardness  Chloramines     Sulfate  Conductivity  \\\n",
              "count  811.000000  811.000000   811.000000  811.000000    811.000000   \n",
              "mean     7.113791  195.908341     7.174395  332.457832    425.005423   \n",
              "std      1.437623   35.301146     1.732796   47.446190     81.950982   \n",
              "min      0.227499   73.492234     1.390871  129.000000    201.619737   \n",
              "25%      6.256039  174.380497     6.106169  301.768819    360.275012   \n",
              "50%      7.046549  197.617494     7.212254  331.087177    421.099917   \n",
              "75%      7.955161  218.414531     8.181431  365.632984    482.296528   \n",
              "max     11.898078  317.338124    13.127000  481.030642    695.369528   \n",
              "\n",
              "       Trihalomethanes   Turbidity  Potability  \n",
              "count       811.000000  811.000000       811.0  \n",
              "mean         66.581596    3.991254         1.0  \n",
              "std          16.297713    0.776408         0.0  \n",
              "min           8.577013    1.492207         1.0  \n",
              "25%          55.751069    3.440564         1.0  \n",
              "50%          66.612984    4.007347         1.0  \n",
              "75%          77.372587    4.527463         1.0  \n",
              "max         124.000000    6.494249         1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b5a9a35-3340-47c9-aa4c-8a2533f52f04\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ph</th>\n",
              "      <th>Hardness</th>\n",
              "      <th>Chloramines</th>\n",
              "      <th>Sulfate</th>\n",
              "      <th>Conductivity</th>\n",
              "      <th>Trihalomethanes</th>\n",
              "      <th>Turbidity</th>\n",
              "      <th>Potability</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>811.000000</td>\n",
              "      <td>811.000000</td>\n",
              "      <td>811.000000</td>\n",
              "      <td>811.000000</td>\n",
              "      <td>811.000000</td>\n",
              "      <td>811.000000</td>\n",
              "      <td>811.000000</td>\n",
              "      <td>811.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.113791</td>\n",
              "      <td>195.908341</td>\n",
              "      <td>7.174395</td>\n",
              "      <td>332.457832</td>\n",
              "      <td>425.005423</td>\n",
              "      <td>66.581596</td>\n",
              "      <td>3.991254</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.437623</td>\n",
              "      <td>35.301146</td>\n",
              "      <td>1.732796</td>\n",
              "      <td>47.446190</td>\n",
              "      <td>81.950982</td>\n",
              "      <td>16.297713</td>\n",
              "      <td>0.776408</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.227499</td>\n",
              "      <td>73.492234</td>\n",
              "      <td>1.390871</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>201.619737</td>\n",
              "      <td>8.577013</td>\n",
              "      <td>1.492207</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6.256039</td>\n",
              "      <td>174.380497</td>\n",
              "      <td>6.106169</td>\n",
              "      <td>301.768819</td>\n",
              "      <td>360.275012</td>\n",
              "      <td>55.751069</td>\n",
              "      <td>3.440564</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.046549</td>\n",
              "      <td>197.617494</td>\n",
              "      <td>7.212254</td>\n",
              "      <td>331.087177</td>\n",
              "      <td>421.099917</td>\n",
              "      <td>66.612984</td>\n",
              "      <td>4.007347</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.955161</td>\n",
              "      <td>218.414531</td>\n",
              "      <td>8.181431</td>\n",
              "      <td>365.632984</td>\n",
              "      <td>482.296528</td>\n",
              "      <td>77.372587</td>\n",
              "      <td>4.527463</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>11.898078</td>\n",
              "      <td>317.338124</td>\n",
              "      <td>13.127000</td>\n",
              "      <td>481.030642</td>\n",
              "      <td>695.369528</td>\n",
              "      <td>124.000000</td>\n",
              "      <td>6.494249</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b5a9a35-3340-47c9-aa4c-8a2533f52f04')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2b5a9a35-3340-47c9-aa4c-8a2533f52f04 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2b5a9a35-3340-47c9-aa4c-8a2533f52f04');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eb933083-43db-4d76-81cf-051e689ae4a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb933083-43db-4d76-81cf-051e689ae4a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eb933083-43db-4d76-81cf-051e689ae4a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "no_potable= water[water[\"Potability\"] == 0]\n",
        "no_potable.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "WAVuQh2Y0Zk8",
        "outputId": "9b58449b-768c-4748-9eaf-f54f659b42ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                ph     Hardness  Chloramines      Sulfate  Conductivity  \\\n",
              "count  1200.000000  1200.000000  1200.000000  1200.000000   1200.000000   \n",
              "mean      7.067201   196.008440     7.107267   333.742928    427.554342   \n",
              "std       1.659106    30.717642     1.476577    36.398403     79.882677   \n",
              "min       1.431782    98.452931     2.456014   203.444521    210.319182   \n",
              "25%       5.982888   177.313440     6.169384   310.653441    369.580980   \n",
              "50%       6.992004   196.799368     7.103718   332.615625    424.479471   \n",
              "75%       8.141979   214.532109     8.076759   356.432048    482.333786   \n",
              "max      14.000000   300.292476    12.653362   460.107069    753.342620   \n",
              "\n",
              "       Trihalomethanes    Turbidity  Potability  \n",
              "count      1200.000000  1200.000000      1200.0  \n",
              "mean         66.278712     3.955181         0.0  \n",
              "std          15.931953     0.782984         0.0  \n",
              "min          14.343161     1.450000         0.0  \n",
              "25%          56.152070     3.444706         0.0  \n",
              "50%          66.206116     3.944085         0.0  \n",
              "75%          77.144621     4.497522         0.0  \n",
              "max         120.030077     6.494749         0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-77a15e72-380c-489a-8bdc-5f3dac6b9a7e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ph</th>\n",
              "      <th>Hardness</th>\n",
              "      <th>Chloramines</th>\n",
              "      <th>Sulfate</th>\n",
              "      <th>Conductivity</th>\n",
              "      <th>Trihalomethanes</th>\n",
              "      <th>Turbidity</th>\n",
              "      <th>Potability</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1200.000000</td>\n",
              "      <td>1200.000000</td>\n",
              "      <td>1200.000000</td>\n",
              "      <td>1200.000000</td>\n",
              "      <td>1200.000000</td>\n",
              "      <td>1200.000000</td>\n",
              "      <td>1200.000000</td>\n",
              "      <td>1200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.067201</td>\n",
              "      <td>196.008440</td>\n",
              "      <td>7.107267</td>\n",
              "      <td>333.742928</td>\n",
              "      <td>427.554342</td>\n",
              "      <td>66.278712</td>\n",
              "      <td>3.955181</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.659106</td>\n",
              "      <td>30.717642</td>\n",
              "      <td>1.476577</td>\n",
              "      <td>36.398403</td>\n",
              "      <td>79.882677</td>\n",
              "      <td>15.931953</td>\n",
              "      <td>0.782984</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.431782</td>\n",
              "      <td>98.452931</td>\n",
              "      <td>2.456014</td>\n",
              "      <td>203.444521</td>\n",
              "      <td>210.319182</td>\n",
              "      <td>14.343161</td>\n",
              "      <td>1.450000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.982888</td>\n",
              "      <td>177.313440</td>\n",
              "      <td>6.169384</td>\n",
              "      <td>310.653441</td>\n",
              "      <td>369.580980</td>\n",
              "      <td>56.152070</td>\n",
              "      <td>3.444706</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.992004</td>\n",
              "      <td>196.799368</td>\n",
              "      <td>7.103718</td>\n",
              "      <td>332.615625</td>\n",
              "      <td>424.479471</td>\n",
              "      <td>66.206116</td>\n",
              "      <td>3.944085</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.141979</td>\n",
              "      <td>214.532109</td>\n",
              "      <td>8.076759</td>\n",
              "      <td>356.432048</td>\n",
              "      <td>482.333786</td>\n",
              "      <td>77.144621</td>\n",
              "      <td>4.497522</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>14.000000</td>\n",
              "      <td>300.292476</td>\n",
              "      <td>12.653362</td>\n",
              "      <td>460.107069</td>\n",
              "      <td>753.342620</td>\n",
              "      <td>120.030077</td>\n",
              "      <td>6.494749</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77a15e72-380c-489a-8bdc-5f3dac6b9a7e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-77a15e72-380c-489a-8bdc-5f3dac6b9a7e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-77a15e72-380c-489a-8bdc-5f3dac6b9a7e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-62ba0c1b-99d4-44d9-a818-d643781b65b2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62ba0c1b-99d4-44d9-a818-d643781b65b2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-62ba0c1b-99d4-44d9-a818-d643781b65b2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define Variables\n",
        "X = water.drop(columns=['Potability'])\n",
        "y = water['Potability']\n",
        "\n",
        "# Train/Test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y, random_state = 1)"
      ],
      "metadata": {
        "id": "-aKVL3sYpL9y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define Variables\n",
        "X = water.drop(columns=['Potability'])\n",
        "y = water['Potability']\n",
        "\n",
        "# Train/Test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y, random_state = 1)\n",
        "\n",
        "sclr = StandardScaler().set_output(transform = \"pandas\")\n",
        "scaler = sclr.fit(X_train)\n",
        "X_train_scaled = scaler.transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "1akxCoyscPm-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The data was scaled using the training data and fit to the test data to avoid data leakage. The data is also individually scaled using a pipeline for every GridSearch separately to avoid data leakage. Scaled data is only used on the models that will be affected by the variance of the different predictors. These models include Support Vector Classifier and Logistic Regression."
      ],
      "metadata": {
        "id": "U35MSOOXAGFy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Base Models"
      ],
      "metadata": {
        "id": "SAbNHloroPcf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Decision Trees"
      ],
      "metadata": {
        "id": "7c1HccR48vWF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "find_parameter(DecisionTreeClassifier)"
      ],
      "metadata": {
        "id": "PuHku-3p9jeL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d2cb8753-173f-43f0-fb2d-b2d311fe7c8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "ccp_alpha: 0.0\n",
            "class_weight: None\n",
            "criterion: gini\n",
            "max_depth: None\n",
            "max_features: None\n",
            "max_leaf_nodes: None\n",
            "min_impurity_decrease: 0.0\n",
            "min_samples_leaf: 1\n",
            "min_samples_split: 2\n",
            "min_weight_fraction_leaf: 0.0\n",
            "random_state: None\n",
            "splitter: best\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter Selection:** We choose to adjust the parameters max_depth, min_samples_split, and ccp_alpha.\n",
        "\n",
        "\n",
        "max_depth - maximum depth of the tree.\n",
        "Normally a tree will continue until all leaves contain less than min_samples_split samples, but if we adjust the max_depth to be smaller, we are attempting to avoid overfitting to the noise at the smaller more difficult to distinguish nodes.\n",
        "\n",
        "\n",
        "min_samples_split - minimum number of samples required to split an internal node\n",
        "This determines how much power individual points may have over the node splitting. Especially as we approach the later nodes in the tree.\n",
        "\n",
        "ccp_alpha - prunes to avoid over-fitting\n",
        "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ccp_alpha will be chosen."
      ],
      "metadata": {
        "id": "Xe_ig3boRhIP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Decision Trees (DTC)\n",
        "model = DecisionTreeClassifier(random_state = 1)\n",
        "\n",
        "# Define Parameter Ranges\n",
        "max_depth_range = range(5, 11)\n",
        "min_samples_range = range(2, 6)\n",
        "ccp_alpha_range = [0, 0.001, 0.01, 0.1, 1]\n",
        "param_grid = {'max_depth' : max_depth_range, 'min_samples_split' : min_samples_range, 'ccp_alpha' : ccp_alpha_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, cv = 5,\n",
        "                                scoring = \"accuracy\",\n",
        "                                return_train_score = True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b0ADkRa681-D",
        "outputId": "6ca3a81c-533a-4da3-ddc9-6636495058e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'ccp_alpha': 0.001, 'max_depth': 5, 'min_samples_split': 2}\n",
            "Mean cross-validated score: 0.644\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Best Tree\n",
        "best_model = DecisionTreeClassifier(ccp_alpha = 0.001, max_depth = 5, min_samples_split = 2,random_state = 1).fit(X_train,y_train)\n",
        "print(\"Best Tree test set score: {:.3f}\".format(best_model.score(X_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V9TzzwCCCWfm",
        "outputId": "a91f90cb-234b-4af5-ab18-fb1e5cd5f09a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Tree test set score: 0.605\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "train_score = []\n",
        "test_score = []\n",
        "params = [1, 5, 10, 15, 20, 25, 30]\n",
        "\n",
        "for p in params:\n",
        "        model = DecisionTreeClassifier(max_depth = p, random_state = 1)\n",
        "        start = time.time()\n",
        "        model.fit(X_train,y_train)\n",
        "        stop = time.time()\n",
        "        fit_time.append(stop - start)\n",
        "        score.append(model.score(X_test, y_test))\n",
        "\n",
        "print(\"Param, Fit Times, Scores \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5.0f} {t:>7.3f} {s:>10.3f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O8AEJuWDLk84",
        "outputId": "d2887ef5-4a4d-4008-eeab-477e6c7a6819"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Param, Fit Times, Scores \n",
            "\n",
            "1       0.007      0.618\n",
            "5       0.010      0.605\n",
            "10      0.014      0.605\n",
            "15      0.017      0.558\n",
            "20      0.019      0.551\n",
            "25      0.019      0.548\n",
            "30      0.020      0.548\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**DECISION TREE RESULTS:**  We found that with a best parameters of ccp_alpha = 0, max_depth = 12, and min_samples_split = 3, we see a test accuracy of 0.581.  This is concerning because our training set was quite a bit higher, which indicates some slight overfitting. As we tested the affect max_depth has on time, we see a drop in accuracy as the max_depth increases, but the time to run the model remains relatively unchanged. This model is fast, so the runtime is not a big concern when tuning."
      ],
      "metadata": {
        "id": "0t3YEKmGXhZR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Support Vector Machines Classifier (SVC)"
      ],
      "metadata": {
        "id": "i-c96uqboRSv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "find_parameter(SVC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0dEbG1TP0-q",
        "outputId": "c867ff2f-7c42-448f-9a8a-3e5d14790e42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "C: 1.0\n",
            "break_ties: False\n",
            "cache_size: 200\n",
            "class_weight: None\n",
            "coef0: 0.0\n",
            "decision_function_shape: ovr\n",
            "degree: 3\n",
            "gamma: scale\n",
            "kernel: rbf\n",
            "max_iter: -1\n",
            "probability: False\n",
            "random_state: None\n",
            "shrinking: True\n",
            "tol: 0.001\n",
            "verbose: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter Selection:** We choose to adjust the parameter C. C is a regularization parameter which dictates how much you want to avoid misclassifying each training example"
      ],
      "metadata": {
        "id": "fo8jPymFfRaP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Model and Preprocessing\n",
        "scaler = StandardScaler()\n",
        "preprocessor = ColumnTransformer([(\"scale\", scaler, X.columns)])\n",
        "model = Pipeline(steps = [(\"preprocess\", preprocessor),(\"svc\", SVC(random_state = 1))])\n",
        "\n",
        "# Define Parameter Ranges\n",
        "C_range =  [.01, .1, 1, 2, 3, 5]\n",
        "param_grid = {'svc__C': C_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, cv = 5,\n",
        "                          scoring='accuracy',\n",
        "                          return_train_score=True,\n",
        "                          refit = True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))"
      ],
      "metadata": {
        "id": "RYmu26ugoRZb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8524869f-b1f1-4be5-9aba-9028d4a4489d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'svc__C': 2}\n",
            "Mean cross-validated score: 0.678\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Best SVC\n",
        "best_model = SVC (C = 2,random_state = 1).fit(X_train_scaled,y_train)\n",
        "print(\"Best SVC test set score: {:.3f}\".format(best_model.score(X_test_scaled, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_SAU7TJERIGV",
        "outputId": "b8a1ab4e-33ea-41f1-d22c-e508f6442948"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best SVC test set score: 0.658\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "train_score = []\n",
        "test_score = []\n",
        "params =  [.01, .1, 0.5, 1, 5, 10, 15, 20]\n",
        "\n",
        "for p in params:\n",
        "        model = SVC(C = p, random_state = 1)\n",
        "        start = time.time()\n",
        "        model.fit(X_train,y_train)\n",
        "        stop = time.time()\n",
        "        fit_time.append(stop - start)\n",
        "        score.append(model.score(X_test, y_test))\n",
        "\n",
        "print(\"Param, Fit Times, Scores \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5.2f} {t:>7.3f} {s:>10.3f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m-qrSS9gQWdk",
        "outputId": "151ed94b-a224-455e-a66c-2866d1511880"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Param, Fit Times, Scores \n",
            "\n",
            "0.01    0.133      0.596\n",
            "0.10    0.158      0.596\n",
            "0.50    0.159      0.596\n",
            "1.00    0.157      0.596\n",
            "5.00    0.174      0.598\n",
            "10.00   0.166      0.600\n",
            "15.00   0.178      0.603\n",
            "20.00   0.178      0.600\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**SVC RESULTS:** We found that with a best parameter of C = 2, we see a test accuracy of 0.658.  Our training set was only slightly higher accuracy at .678. As we tested the affect C has on time, we see a very slight increase in accuracy and time."
      ],
      "metadata": {
        "id": "4bxfXkMvnYCg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Random Forest"
      ],
      "metadata": {
        "id": "I6Wt_VhioRfL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "find_parameter(RandomForestClassifier)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PeShERh3QK3_",
        "outputId": "85dd365f-4693-40f2-f807-7b1061e47a0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "bootstrap: True\n",
            "ccp_alpha: 0.0\n",
            "class_weight: None\n",
            "criterion: gini\n",
            "max_depth: None\n",
            "max_features: sqrt\n",
            "max_leaf_nodes: None\n",
            "max_samples: None\n",
            "min_impurity_decrease: 0.0\n",
            "min_samples_leaf: 1\n",
            "min_samples_split: 2\n",
            "min_weight_fraction_leaf: 0.0\n",
            "n_estimators: 100\n",
            "n_jobs: None\n",
            "oob_score: False\n",
            "random_state: None\n",
            "verbose: 0\n",
            "warm_start: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter Selection:** We choose to adjust the parameters max_depth, min_samples_split, and n_estimators\n",
        "\n",
        "We will not adjust ccp_alpha, as we found it not to be as powerful of a parameter of the others when exploring Decision Trees. It gives us the opportunity to adjust the parameter that Random Forest introduces called number of estimators which determines how many decision trees are in the Random Forest Model.\n",
        "\n",
        "n_estimators - the number of Decision Trees built within each forest.\n",
        "\n",
        "PARAMETERS ON SMALLER DECISION TREES:\n",
        "max_depth - maximum depth of the tree.\n",
        "min_samples_split - minimum number of samples required to split an internal node"
      ],
      "metadata": {
        "id": "wzH9WoXRTvZL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Random Forest (RFC)\n",
        "model = RandomForestClassifier(random_state = 1)\n",
        "\n",
        "# Define Parameter Ranges\n",
        "max_depth_range = [3, 5, 7, 10]\n",
        "min_samples_range = [2, 3, 5]\n",
        "estimators_range = [100, 300, 500]\n",
        "param_grid = { 'max_depth' : max_depth_range,\n",
        "              'min_samples_split' : min_samples_range,\n",
        "              'n_estimators' : estimators_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, cv = 5,\n",
        "                          scoring='accuracy',\n",
        "                          return_train_score=True,\n",
        "                          refit = True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))"
      ],
      "metadata": {
        "id": "1EUo3MXuoRkN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "567578c1-296c-47d8-f457-28424448215b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'max_depth': 10, 'min_samples_split': 2, 'n_estimators': 500}\n",
            "Mean cross-validated score: 0.678\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Best Random Forest\n",
        "best_model = RandomForestClassifier(n_estimators = 500, max_depth = 10, min_samples_split = 2, random_state = 1).fit(X_train, y_train)\n",
        "print(\"Best Random Forest test set score: {:.3f}\".format(best_model.score(X_test, y_test)))"
      ],
      "metadata": {
        "id": "kHZEFxpZQ_UF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01dfbd0a-73ef-4f7d-aced-baf6b5e0d909"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Random Forest test set score: 0.635\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "train_score = []\n",
        "test_score = []\n",
        "params =  [2, 3, 5, 7, 10, 13, 15]\n",
        "\n",
        "for p in params:\n",
        "        model = RandomForestClassifier(max_depth = p, random_state = 1)\n",
        "        start = time.time()\n",
        "        model.fit(X_train,y_train)\n",
        "        stop = time.time()\n",
        "        fit_time.append(stop - start)\n",
        "        score.append(model.score(X_test, y_test))\n",
        "\n",
        "print(\"Param, Fit Times, Scores \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5.0f} {t:>7.3f} {s:>10.3f}\")"
      ],
      "metadata": {
        "id": "wb5cSr1nVb-G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e53791ad-8f19-48c6-bee7-c4f9eba5d3c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Param, Fit Times, Scores \n",
            "\n",
            "2       0.222      0.610\n",
            "3       0.233      0.618\n",
            "5       0.298      0.643\n",
            "7       0.353      0.640\n",
            "10      0.410      0.643\n",
            "13      0.451      0.638\n",
            "15      0.491      0.633\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "train_score = []\n",
        "test_score = []\n",
        "params =  [100, 200, 300, 400, 500, 600]\n",
        "\n",
        "for p in params:\n",
        "        model = RandomForestClassifier(n_estimators = p, random_state = 1)\n",
        "        start = time.time()\n",
        "        model.fit(X_train,y_train)\n",
        "        stop = time.time()\n",
        "        fit_time.append(stop - start)\n",
        "        score.append(model.score(X_test, y_test))\n",
        "\n",
        "print(\"Param, Fit Times, Scores \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5.0f} {t:>7.3f} {s:>10.3f}\")"
      ],
      "metadata": {
        "id": "xGscLRVSqFmO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6ce504f-0a2b-4e79-ff66-ffba6d0e187e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Param, Fit Times, Scores \n",
            "\n",
            "100     0.522      0.633\n",
            "200     1.126      0.625\n",
            "300     2.262      0.625\n",
            "400     2.980      0.628\n",
            "500     2.611      0.633\n",
            "600     3.084      0.640\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**RANDOM FOREST RESULTS:**\n",
        "We found that with a best parameters of n_estimators = 500, max_depth = 15, and min_samples_split = 5, we see a test accuracy of 0.628. Although these scores are not exceptional, this Random Forest Model performs slightly better than the more simple Decision Tree Classifier, which had a score of .581. The max_depth of each tree within the random forest seems to have a significant impact on the accuracy and not as much so on the fit times, while the number of estimators has the opposite of large fit time increases with not drastic changes in accuracy."
      ],
      "metadata": {
        "id": "Xyz3ivOGndzh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Logistic Regression"
      ],
      "metadata": {
        "id": "nBTSuWdpoRqY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "find_parameter(LogisticRegression)"
      ],
      "metadata": {
        "id": "DQOhTDXTRyzd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f3bad440-abf7-40c4-91e2-b874fb2a634a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "C: 1.0\n",
            "class_weight: None\n",
            "dual: False\n",
            "fit_intercept: True\n",
            "intercept_scaling: 1\n",
            "l1_ratio: None\n",
            "max_iter: 100\n",
            "multi_class: auto\n",
            "n_jobs: None\n",
            "penalty: l2\n",
            "random_state: None\n",
            "solver: lbfgs\n",
            "tol: 0.0001\n",
            "verbose: 0\n",
            "warm_start: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**HYPERPARAMETER SELECTION:**\n",
        "\n",
        "C - regularization strength\n",
        "\n",
        "Class weights stays default because we scaled data\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "H8Dr7_YziEUm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Model and Preprocessing\n",
        "scaler = StandardScaler()\n",
        "preprocessor = ColumnTransformer([(\"scale\", scaler, X.columns)])\n",
        "model = Pipeline(steps = [(\"preprocess\", preprocessor),(\"LR\", LogisticRegression(random_state = 1))])\n",
        "\n",
        "\n",
        "# Define Parameter Ranges\n",
        "C_range =  [.01, .1, 1, 2]\n",
        "param_grid = {'LR__C': C_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, cv = 5,\n",
        "                          scoring='accuracy',\n",
        "                          return_train_score=True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))"
      ],
      "metadata": {
        "id": "-0Sdpg7mRy0W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "591b6fd4-a4e8-4687-c9be-9e7daa38e049"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'LR__C': 0.01}\n",
            "Mean cross-validated score: 0.597\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Best Logistic Regression\n",
        "best_model = LogisticRegression(C = 0.01, random_state = 1).fit(X_train_scaled,y_train)\n",
        "print(\"Best Logistic Regression test set score: {:.3f}\".format(best_model.score(X_test_scaled, y_test)))"
      ],
      "metadata": {
        "id": "S3_A-BrzTPme",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c91ac04c-3cb0-4acd-ca27-0f3a8160d4db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Logistic Regression test set score: 0.596\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "train_score = []\n",
        "test_score = []\n",
        "params =  [.01, .1, 0.5, 1, 5, 10, 15, 20]\n",
        "\n",
        "for p in params:\n",
        "        model = LogisticRegression(C = p, random_state = 1)\n",
        "        start = time.time()\n",
        "        model.fit(X_train,y_train)\n",
        "        stop = time.time()\n",
        "        fit_time.append(stop - start)\n",
        "        score.append(model.score(X_test, y_test))\n",
        "\n",
        "print(\"Param, Fit Times, Scores \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5.2f} {t:>7.3f} {s:>10.3f}\")"
      ],
      "metadata": {
        "id": "-EA1_45BoRvc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5db94697-5448-4ff0-84ef-b8a352443914"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Param, Fit Times, Scores \n",
            "\n",
            "0.01    0.037      0.596\n",
            "0.10    0.019      0.596\n",
            "0.50    0.031      0.596\n",
            "1.00    0.021      0.596\n",
            "5.00    0.020      0.596\n",
            "10.00   0.024      0.596\n",
            "15.00   0.017      0.596\n",
            "20.00   0.023      0.596\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**LOGISTIC REGRESSION RESULTS:**  "
      ],
      "metadata": {
        "id": "rTYvPrdToR1L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Ensemble Models"
      ],
      "metadata": {
        "id": "nwHq8p9NjOFT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "SVC Best Params: C = 2\n",
        "\n",
        "Random Forest Best Params:\n",
        "\n",
        "- max_depth = 12\n",
        "- min_samples_split = 3\n",
        "- n_estimators = 300\n",
        "\n",
        "Compare Ensemble Models to Base Learners"
      ],
      "metadata": {
        "id": "pnwcgjJ_gzYr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Bagging Classifier"
      ],
      "metadata": {
        "id": "4eG-_5u6rAl1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "find_parameter(BaggingClassifier)"
      ],
      "metadata": {
        "id": "dVD0A4FvgiHw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f1e3349-5a98-48da-ee2d-e1eb4b7dcd96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "base_estimator: deprecated\n",
            "bootstrap: True\n",
            "bootstrap_features: False\n",
            "estimator: None\n",
            "max_features: 1.0\n",
            "max_samples: 1.0\n",
            "n_estimators: 10\n",
            "n_jobs: None\n",
            "oob_score: False\n",
            "random_state: None\n",
            "verbose: 0\n",
            "warm_start: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter Selection:**\n",
        "max_features - number of features selected from the numerical predictors/parameters\n",
        "\n",
        "max_samples - maximum number of samples from X used to train the base decision trees\n",
        "\n",
        "n_estimators - number of decision trees ran"
      ],
      "metadata": {
        "id": "HgLCb9FiLKdK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "params = [10, 50, 100, 200, 300, 400, 500]\n",
        "model = BaggingClassifier\n",
        "\n",
        "for p in params:\n",
        "    model1 = model(n_estimators = p, max_samples = p, max_features = 7,random_state = 1)\n",
        "    start = time.time()\n",
        "    model1.fit(X_train, y_train)\n",
        "    stop = time.time()\n",
        "    fit_time.append(stop - start)\n",
        "    score.append(model1.score(X_test, y_test))\n",
        "\n",
        "print(\"Params Fit times Score \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5} {t:>10.1f}  {s:>5.4f}\")"
      ],
      "metadata": {
        "id": "8zhc5a8urRwA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7090bf0-4a15-4bb3-d354-8f90f7c3a5a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Params Fit times Score \n",
            "\n",
            "10           0.0  0.4640\n",
            "50           0.1  0.6129\n",
            "100          0.2  0.6303\n",
            "200          0.6  0.6303\n",
            "300          1.1  0.6427\n",
            "400          2.1  0.6476\n",
            "500          3.9  0.6303\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We determined that the maximum features should remain at 7 because this resulted in the most accuracy, we do not have an absurd amount of features in the data, and the run times were still quite low.\n",
        "\n",
        "The cross validated accuracy of the n_estimator and max_samples kept wanting to increase. The higher that these numbers are, though, the longer the fit times. We determined that the accuracy of the model started to level off when these values were around 200, while the fit time for 500 was almost 3x that of 200. This helped determine the ranges below."
      ],
      "metadata": {
        "id": "Dqti_tNztsSv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = BaggingClassifier(random_state = 1)\n",
        "\n",
        "# Define Parameters\n",
        "max_features_range = [7]\n",
        "max_samples_range = [50, 100, 200]\n",
        "n_estimators_range = [50, 100, 200]\n",
        "param_grid = {'max_features': max_features_range,\n",
        "              'max_samples': max_samples_range,\n",
        "              'n_estimators': n_estimators_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, cv = 5,\n",
        "                          scoring='accuracy',\n",
        "                          return_train_score=True,\n",
        "                          refit = True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))\n",
        "\n",
        "\n",
        "# Best Model\n",
        "best_model = BaggingClassifier(**grid_search.best_params_, random_state = 1).fit(X_train,y_train)\n",
        "print(\"Best test set score: {:.3f}\".format(best_model.score(X_test, y_test)))"
      ],
      "metadata": {
        "id": "bEryv6FdifjR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f2be197-7744-4a66-dfce-3057d0a8b511"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'max_features': 7, 'max_samples': 200, 'n_estimators': 200}\n",
            "Mean cross-validated score: 0.669\n",
            "Best test set score: 0.630\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**BAGGING CLASSIFIER RESULTS:** We found that with a best parameters of max_feature = 7, max_samples = 200, and n_estimator = 200, we see a test score of 0.630. Although these scores are not exceptional, model performs slightly better than the more simple Decision Tree Classifier, which had a score of .581 and comparable to Random forest which had a test score of .628. By Bagging the Decision Tree Classifier, we hoped to test the data on a larger randomized population to determine the test accuracy. This showed us that our model accuracy is still quite low, but is avoiding overfitting and underfitting because the training and test scores are quite equal."
      ],
      "metadata": {
        "id": "J7l64hIVeCKH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### AdaBoosting Classifier"
      ],
      "metadata": {
        "id": "4pYGCRzYguq5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "find_parameter(AdaBoostClassifier)"
      ],
      "metadata": {
        "id": "-RMk0kNcgi6A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "07046da3-d7a2-4821-f13d-9690d4a11406"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "algorithm: SAMME.R\n",
            "base_estimator: deprecated\n",
            "estimator: None\n",
            "learning_rate: 1.0\n",
            "n_estimators: 50\n",
            "random_state: None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter selection:**\n",
        "\n",
        "learning_rate - Weight applied to each classifier at each boosting iteration. A higher learning rate increases the contribution of each classifier. There is a trade-off between the learning_rate and n_estimators parameters\n",
        "\n",
        "n_estimators - The number of decision trees run in the model\n"
      ],
      "metadata": {
        "id": "wxJgCG6LMz2o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = AdaBoostClassifier(DecisionTreeClassifier(random_state = 1), random_state = 1)\n",
        "\n",
        "# Define Parameters\n",
        "learning_range = [0.001, 0.01, 0.1, 1]\n",
        "estimators_range = [5, 10, 25, 50, 100]\n",
        "param_grid = {'learning_rate': learning_range,\n",
        "              'n_estimators': estimators_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid = param_grid,\n",
        "                                cv = 5,\n",
        "                                scoring='accuracy',\n",
        "                                return_train_score=True,\n",
        "                                refit = True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))\n",
        "\n",
        "\n",
        "# Best AdaBoostClassifier\n",
        "best_model = AdaBoostClassifier(**grid_search.best_params_, random_state = 1).fit(X_train,y_train)\n",
        "print(\"Best test set score: {:.3f}\".format(best_model.score(X_test, y_test)))"
      ],
      "metadata": {
        "id": "gUhfpwjSij2N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f525b576-cfd2-460e-9ae9-f5486e22b584"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'learning_rate': 0.001, 'n_estimators': 5}\n",
            "Mean cross-validated score: 0.594\n",
            "Best test set score: 0.618\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "params = [5, 10, 25, 50, 100]\n",
        "model = AdaBoostClassifier\n",
        "\n",
        "for p in params:\n",
        "    model1 = model(n_estimators = p, random_state = 1)\n",
        "    start = time.time()\n",
        "    model1.fit(X_train, y_train)\n",
        "    stop = time.time()\n",
        "    fit_time.append(stop - start)\n",
        "    score.append(model1.score(X_test, y_test))\n",
        "\n",
        "print(\"Params Fit times Score \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5} {t:>10.1f}  {s:>5.4f}\")"
      ],
      "metadata": {
        "id": "L0UdmwZUfuqv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8bfb77c-47f6-48ca-f4e4-d017fe866952"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Params Fit times Score \n",
            "\n",
            "5            0.0  0.6079\n",
            "10           0.0  0.5931\n",
            "25           0.1  0.5757\n",
            "50           0.2  0.5931\n",
            "100          0.4  0.5881\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**ADABOOST CLASSIFIER RESULTS:**\n",
        "We found that with the best parameters of learning_rate = .001  and n_estimators = 5, we see a test score of 0.618. This model performs about as well on the test set as the Bagging model. We are a bit concerned that this model is potentially underfitting the data or, more likely, not running enough decision trees to decrease bias and variance due to the n_estimators only being 5. This is the optimal parameter, but it just does not seem to be maximizing ADA Boosting's potential, so it feels worth noting."
      ],
      "metadata": {
        "id": "dvZPtze0HJbP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Gradient Boosting"
      ],
      "metadata": {
        "id": "ImCiLvOGgvnZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "find_parameter(GradientBoostingClassifier)"
      ],
      "metadata": {
        "id": "_DQgCl5HgjhI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9399ac87-7f15-421e-b524-28133d317c5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "ccp_alpha: 0.0\n",
            "criterion: friedman_mse\n",
            "init: None\n",
            "learning_rate: 0.1\n",
            "loss: log_loss\n",
            "max_depth: 3\n",
            "max_features: None\n",
            "max_leaf_nodes: None\n",
            "min_impurity_decrease: 0.0\n",
            "min_samples_leaf: 1\n",
            "min_samples_split: 2\n",
            "min_weight_fraction_leaf: 0.0\n",
            "n_estimators: 100\n",
            "n_iter_no_change: None\n",
            "random_state: None\n",
            "subsample: 1.0\n",
            "tol: 0.0001\n",
            "validation_fraction: 0.1\n",
            "verbose: 0\n",
            "warm_start: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter Selection:**\n",
        "\n",
        "learning_rate - Weight applied to each classifier at each boosting iteration. A higher learning rate increases the contribution of each classifier. There is a trade-off between the learning_rate and n_estimators parameters\n",
        "\n",
        "n_estimators - The number of decision trees run in the model\n",
        "\n",
        "max_depth - the maximum depth of the trees run\n"
      ],
      "metadata": {
        "id": "U4v8iHBajzBF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = GradientBoostingClassifier(random_state = 1)\n",
        "\n",
        "# Define Parameters\n",
        "learning_range = [0.01, 0.1, 1]\n",
        "estimators_range = [10, 100, 200]\n",
        "depth_range = [1, 5, 10]\n",
        "\n",
        "param_grid = {'learning_rate': learning_range,\n",
        "              'n_estimators': estimators_range,\n",
        "              'max_depth' : depth_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid = param_grid,\n",
        "                                cv = 5,\n",
        "                                scoring = 'accuracy',\n",
        "                                return_train_score = True,\n",
        "                                refit = True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))\n",
        "\n",
        "# Best AdaBoostClassifier\n",
        "best_model = GradientBoostingClassifier(**grid_search.best_params_, random_state = 1).fit(X_train,y_train)\n",
        "print(\"Best test set score: {:.3f}\".format(best_model.score(X_test, y_test)))"
      ],
      "metadata": {
        "id": "C3ii9elhtRnK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3b770b08-cecc-4ac7-c6ed-5c4aea4f773b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'learning_rate': 0.01, 'max_depth': 5, 'n_estimators': 200}\n",
            "Mean cross-validated score: 0.666\n",
            "Best test set score: 0.613\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "params = [10, 100, 200]\n",
        "model = GradientBoostingClassifier\n",
        "\n",
        "for p in params:\n",
        "    model1 = model(n_estimators = p, random_state = 1)\n",
        "    start = time.time()\n",
        "    model1.fit(X_train, y_train)\n",
        "    stop = time.time()\n",
        "    fit_time.append(stop - start)\n",
        "    score.append(model1.score(X_test, y_test))\n",
        "\n",
        "print(\"Params Fit times Score \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5} {t:>10.1f}  {s:>5.4f}\")"
      ],
      "metadata": {
        "id": "DD5G9m-5un0H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23326ded-aa85-4a26-e23c-85e082053beb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Params Fit times Score \n",
            "\n",
            "10           0.1  0.6278\n",
            "100          0.5  0.6377\n",
            "200          1.0  0.6476\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit_time = []\n",
        "score = []\n",
        "params = [1, 5, 10]\n",
        "model = GradientBoostingClassifier\n",
        "\n",
        "for p in params:\n",
        "    model1 = model(max_depth = p, random_state = 1)\n",
        "    start = time.time()\n",
        "    model1.fit(X_train, y_train)\n",
        "    stop = time.time()\n",
        "    fit_time.append(stop - start)\n",
        "    score.append(model1.score(X_test, y_test))\n",
        "\n",
        "print(\"Params Fit times Score \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5} {t:>10.1f}  {s:>5.4f}\")"
      ],
      "metadata": {
        "id": "CACCQj4HvIaO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "309e5356-28da-4e76-ad46-587badfe5adf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Params Fit times Score \n",
            "\n",
            "1            0.2  0.6030\n",
            "5            1.1  0.6203\n",
            "10           2.6  0.6179\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**GRADIENT BOOST CLASSIFIER RESULTS:**\n",
        "\n",
        "We found that with the best parameters of learning_rate = .01, max_depth = 5, and n_estimators = 200, we see a test score of 0.613. This model performs about as well on the test set as the Bagging model and ADA Boosting model. The fit times of these models were all pretty low, but the max_depth did seem to have the most impact of a few seconds, which is pretty minimal. These tuned parameters also seem to be more reasonable than ADA Boosting's. Having relatively shallow trees with a max_depth of 5 may be underfitting the data on each individual tree, but it saves time in the model and the n_estimators of 200 decreases the impact of this underfitting by generating 200 trees within the model. This is exactly how the model is supposed to run."
      ],
      "metadata": {
        "id": "SrEVJTnzodiN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Stacking"
      ],
      "metadata": {
        "id": "ON99S6q8gwl2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stk = StackingClassifier(estimators= [\n",
        "  ('model1', DecisionTreeClassifier(ccp_alpha = 0.001, max_depth = 5, min_samples_split = 2)),\n",
        "  ('model2', LogisticRegression(C = 0.01)),\n",
        "],\n",
        "  final_estimator= SVC(random_state = 1)\n",
        ")\n",
        "print(\"Default Parameters:\")\n",
        "for param, value in stk.get_params().items():\n",
        "  print(f\"{param}: {value}\")"
      ],
      "metadata": {
        "id": "KGrFjdYggkGv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "903b5e39-ef01-40b3-acaa-dc6db837d69a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Default Parameters:\n",
            "cv: None\n",
            "estimators: [('model1', DecisionTreeClassifier(ccp_alpha=0.001, max_depth=5)), ('model2', LogisticRegression(C=0.01))]\n",
            "final_estimator__C: 1.0\n",
            "final_estimator__break_ties: False\n",
            "final_estimator__cache_size: 200\n",
            "final_estimator__class_weight: None\n",
            "final_estimator__coef0: 0.0\n",
            "final_estimator__decision_function_shape: ovr\n",
            "final_estimator__degree: 3\n",
            "final_estimator__gamma: scale\n",
            "final_estimator__kernel: rbf\n",
            "final_estimator__max_iter: -1\n",
            "final_estimator__probability: False\n",
            "final_estimator__random_state: 1\n",
            "final_estimator__shrinking: True\n",
            "final_estimator__tol: 0.001\n",
            "final_estimator__verbose: False\n",
            "final_estimator: SVC(random_state=1)\n",
            "n_jobs: None\n",
            "passthrough: False\n",
            "stack_method: auto\n",
            "verbose: 0\n",
            "model1: DecisionTreeClassifier(ccp_alpha=0.001, max_depth=5)\n",
            "model2: LogisticRegression(C=0.01)\n",
            "model1__ccp_alpha: 0.001\n",
            "model1__class_weight: None\n",
            "model1__criterion: gini\n",
            "model1__max_depth: 5\n",
            "model1__max_features: None\n",
            "model1__max_leaf_nodes: None\n",
            "model1__min_impurity_decrease: 0.0\n",
            "model1__min_samples_leaf: 1\n",
            "model1__min_samples_split: 2\n",
            "model1__min_weight_fraction_leaf: 0.0\n",
            "model1__random_state: None\n",
            "model1__splitter: best\n",
            "model2__C: 0.01\n",
            "model2__class_weight: None\n",
            "model2__dual: False\n",
            "model2__fit_intercept: True\n",
            "model2__intercept_scaling: 1\n",
            "model2__l1_ratio: None\n",
            "model2__max_iter: 100\n",
            "model2__multi_class: auto\n",
            "model2__n_jobs: None\n",
            "model2__penalty: l2\n",
            "model2__random_state: None\n",
            "model2__solver: lbfgs\n",
            "model2__tol: 0.0001\n",
            "model2__verbose: 0\n",
            "model2__warm_start: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Hyperparameter Selection:**\n",
        "\n",
        "Base learners: models property tuned using parameters determined in Base Models above\n",
        "\n",
        "DecisionTreeClassifier  \n",
        "\n",
        "LogisticRegression\n",
        "\n",
        "Final Estimator:\n",
        "\n",
        "SVC - C being re-tuned to be optimal within this model. C is a regularization parameter which dictates how much you want to avoid misclassifying each training example\n"
      ],
      "metadata": {
        "id": "uQHZO1cvJCG_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "fit_time = []\n",
        "score = []\n",
        "params = [.01, .1, 1, 2, 3, 5]\n",
        "\n",
        "for p in params:\n",
        "    stk = StackingClassifier(estimators= [\n",
        "        ('model1', DecisionTreeClassifier(ccp_alpha = 0.001, max_depth = 5, min_samples_split = 2)),\n",
        "         ('model2', LogisticRegression(C = 0.01)),\n",
        "    ],\n",
        "                             final_estimator= SVC(C = p, random_state = 1)\n",
        "    )\n",
        "    start = time.time()\n",
        "    stk.fit(X_train_scaled, y_train)\n",
        "    stop = time.time()\n",
        "    fit_time.append(stop - start)\n",
        "    score.append(stk.score(X_test_scaled, y_test))\n",
        "\n",
        "print(\"Best Values fit times score \\n\")\n",
        "for p, t, s in list(zip(params, fit_time, score)):\n",
        "    print(f\"{p:<5} {t:>10.1f}  {s:>5.4f}\")"
      ],
      "metadata": {
        "id": "u9EEEaEhrx6g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e27fab71-6efc-4576-f5db-9efc349dbbda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Values fit times score \n",
            "\n",
            "0.01         0.3  0.5955\n",
            "0.1          0.4  0.6055\n",
            "1            0.4  0.6055\n",
            "2            0.4  0.6055\n",
            "3            0.3  0.6055\n",
            "5            0.3  0.6055\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model and Preprocessing\n",
        "scaler = StandardScaler()\n",
        "preprocessor = ColumnTransformer([(\"scale\", scaler, X.columns)])\n",
        "model = Pipeline(steps = [(\"preprocess\", preprocessor),(\"stk\", stk)])\n",
        "\n",
        "# Define Parameter Ranges\n",
        "C_range =  [.01, .1, 1, 2, 3, 5]\n",
        "param_grid = {'stk__final_estimator__C': C_range}\n",
        "\n",
        "# Parameter Tuning via GridSearchCV\n",
        "grid_search = GridSearchCV(model, param_grid, cv=5,\n",
        "                          scoring='accuracy',\n",
        "                          return_train_score=True)\n",
        "grid_search.fit(X_train, y_train)\n",
        "print(\"Best parameters: {}\".format(grid_search.best_params_))\n",
        "print(\"Mean cross-validated score: {:.3f}\".format(grid_search.best_score_))"
      ],
      "metadata": {
        "id": "Clj7Lb75r0NK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3c0a29b7-b540-43d7-ea5c-abac7f034d91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'stk__final_estimator__C': 5}\n",
            "Mean cross-validated score: 0.639\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Best Logistic Regression\n",
        "best_model = StackingClassifier(estimators= [\n",
        "  ('model1', DecisionTreeClassifier(ccp_alpha = 0.001, max_depth = 5, min_samples_split = 2)),\n",
        "  ('model2', LogisticRegression(C = 0.01)),\n",
        "],\n",
        "  final_estimator= SVC(C=5, random_state=1)\n",
        ").fit(X_train_scaled,y_train)\n",
        "print(\"Best Stacking test set score: {:.3f}\".format(best_model.score(X_test_scaled, y_test)))"
      ],
      "metadata": {
        "id": "oBM2UxLur0-F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "00c7794c-6d69-4434-d4da-6bd4fda0d3c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Stacking test set score: 0.605\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**STACKING CLASSIFIER RESULTS:**\n",
        "\n",
        "We found that with the best parameters of C = 5, we see a test score of .605. All of these C value tuning parameters ran at about the same speed. This model had the lowest test score of all of the ensemble models."
      ],
      "metadata": {
        "id": "2lIGWddoJ7LQ"
      }
    }
  ]
}
